using System.Globalization;
using System.Reflection;
using System.Text;
using DSharpPlus;

namespace DSharpPlus.Tools.ShardedEventHandlingGen;

public static class Program
{
    private const string License =
        "// This file is part of the DSharpPlus project.\n//\n// Copyright (c) 2015 Mike Santiago\n// Copyright (c) 2016-2023 DSharpPlus Contributors\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.";

    private const string NamespaceAndUsings =
        "using System;\nusing System.Threading.Tasks;\nusing DSharpPlus.AsyncEvents;\nusing DSharpPlus.EventArgs;\nusing Microsoft.Extensions.Logging;\n\nnamespace DSharpPlus;";

    private const string ClassHeader = "public sealed partial class DiscordShardedClient\n{";
        
    public static async Task Main(string[] args)
    {
        if (args.Length != 1)
        {
            Console.WriteLine("Usage: DSharpPlus.Tools.ShardedEventHandlingGen <path for output>");
            return;
        }
        StringBuilderIndented sb = new();
        sb = sb.CreateFileHeader();
        sb.Indent();
        EventInfo[] evs = typeof(DiscordClient).GetEvents();
        
        //Creates all public events with the private backing field
        foreach (EventInfo ev in evs)
        {
            sb.AddEventCode(ev);
        }
        
        //Creates the hook method
        sb.AppendLine("private void HookEventHandlers(DiscordClient client)");
        sb.AppendLine("{");
        sb.Indent();
        foreach (EventInfo ev in evs)
        {
            sb.AppendLine($"client.{ev.Name} += this.Client_{ev.Name};");
        }
        sb.Unindent();
        sb.AppendLine("}");
        sb.AppendLine();
        
        //Creates the unhook method
        sb.AppendLine("private void UnhookEventHandlers(DiscordClient client)");
        sb.AppendLine("{");
        sb.Indent();
        foreach (EventInfo ev in evs)
        {
            sb.AppendLine($"client.{ev.Name} -= this.Client_{ev.Name};");
        }
        sb.Unindent();
        sb.AppendLine("}");
        sb.AppendLine();
        
        //Create internal event initializer method
        sb.AppendLine("private void InternalSetup()");
        sb.AppendLine("{");
        sb.Indent();
        sb.AppendLine("this._clientErrored = new AsyncEvent<DiscordClient, ClientErrorEventArgs>(\"CLIENT_ERRORED\", this.Goof);");
        foreach (EventInfo ev in evs)
        {
            if (ev.Name == "ClientErrored")
            {
                continue;
            }
            
            sb.AppendLine($"this._{ev.Name.Camelize()} = new(\"{ev.Name}\", this.EventErrorHandler);");
        }
        sb.Unindent();
        sb.AppendLine("}");
        sb.AppendLine();
        
        //end of class
        sb.Unindent();
        sb.AppendLine("}");
        
        File.WriteAllText(args[0], sb.ToString());
    }

    public static StringBuilderIndented CreateFileHeader(this StringBuilderIndented sb)
    {
        sb.AppendLine(License);
        sb.AppendLine();
        sb.AppendLine();
        sb.AppendLine("// This code was automatically generated by DSharpPlus.Tools.ShardedEventHandlingGen.");
        sb.AppendLine("// Do not edit this manually.");
        sb.AppendLine("// Created at " + DateTime.UtcNow.ToString("R", CultureInfo.InvariantCulture));
        sb.AppendLine();
        sb.AppendLine(NamespaceAndUsings);
        sb.AppendLine();
        sb.AppendLine(ClassHeader);
        return sb;
    }

    public static StringBuilderIndented AddEventCode(this StringBuilderIndented sb, EventInfo eventInfo)
    {
        string eventName = eventInfo.Name;
        string eventArgs = eventInfo.EventHandlerType.GenericTypeArguments[1].ToString()
            .Replace("DSharpPlus.EventArgs.", "");
        string handlerTypes = "DiscordClient, " + eventArgs;
        string privateName = "_" + eventName.Camelize();


        sb.AppendLine($"/// <inheritdoc cref=\"DiscordClient.{eventName}\"/>");
        sb.AppendLine("public event AsyncEventHandler<" + handlerTypes + "> " + eventName);
        sb.AppendLine("{");
        sb.Indent();
        sb.AppendLine($"add => this.{privateName}.Register(value);");
        sb.AppendLine($"remove => this.{privateName}.Unregister(value);");
        sb.Unindent();
        sb.AppendLine("}");
        sb.AppendLine($"private AsyncEvent<{handlerTypes}> {privateName};");
        sb.AppendLine();
        sb.AppendLine(
            $"private Task Client_{eventName}(DiscordClient client, {eventArgs} e)\n        => this.{privateName}.InvokeAsync(client, e);");
        sb.AppendLine();

        return sb;
    }
    
    public static string Camelize(this string str)
    {
        if (string.IsNullOrEmpty(str))
        {
            return str;
        }

        if (str.Length == 1)
        {
            return str.ToLowerInvariant();
        }

        return str.Substring(0, 1).ToLowerInvariant() + str.Substring(1);
    }

}

//https://stackoverflow.com/questions/67434927/stringbuilder-and-indentation
public class StringBuilderIndented
{
    private StringBuilder _sb;

    public string _indent = "";

    public StringBuilderIndented() => this._sb = new StringBuilder();

    public void Indent() => this._indent += new string(' ', 4);

    public void AppendLine(string str = "") => this._sb.AppendLine(this._indent + str);

    public void Unindent()
    {
        if (this._indent.Length >= 4)
        {
            this._indent = new string(' ', this._indent.Length - 4);
        }
        else
        {
            this._indent = "";
        }
    }

    public override string ToString() => this._sb.ToString();
}
