# This file belongs at the top level of the source tree, and should not inherit any other .editorconfig rules.
root = true

### All files
[*]

# Keep all files in utf-8 encoding
charset = utf-8

# Remove trailing whitespace from each line
trim_trailing_whitespace = true

# Have all files use 4 spaces for indentation
indent_size = 4
indent_style = space

# Use Unix line endings
end_of_line = lf

# Always insert a final newline at the end of the file
insert_final_newline = true

# Yell at people when they don't include the file header template
dotnet_diagnostic.IDE0073.severity = warning
# Used to add a disclaimer to the top of every file.
file_header_template = This file is part of the DSharpPlus project.\n\nCopyright (c) 2015 Mike Santiago\nCopyright (c) 2016-2022 DSharpPlus Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.

### Dotnet Files
[*.cs, *.vb]

### Formatting
# Prefer `this.` or `Me.` prefixes when using instance members
dotnet_style_qualification_for_event = true:warning
dotnet_style_qualification_for_field = true:warning
dotnet_style_qualification_for_method = true:warning
dotnet_style_qualification_for_property = true:warning

# Prefer `x ?? y` instead of `x != null ? x : y`
dotnet_style_coalesce_expression = true:warning

# Use null operator (?) instead of null checks
dotnet_style_null_propagation = true:warning

# Prefer `x is null` over `object.ReferenceEquals(x, null)`
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

# Use language keywords instead of class names (I.E, `int` instead of `Int32`)
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Keep all usings in one group
dotnet_separate_import_directive_groups = false:warning

# Alphabetically sort all usings, with system namespaces not having any special handling
dotnet_sort_system_directives_first = false:warning

# Specify accessibility modifiers on everything except interfaces
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning

# Use auto properties instead of hidden fields
dotnet_style_prefer_auto_properties = true:warning

# Prefer readonly when possible
dotnet_style_readonly_field = true:warning

# Simplifies string interpolation, usually by converting `{x.ToString()}` to `{x}`
dotnet_style_prefer_simplified_interpolation = true:warning

# Remove unused or redundant `#pragma warning disable` directives or `[SupressMessage]` attributes
dotnet_remove_unnecessary_suppression_exclusions = true:warning

# Remove unused parameters in non-public methods
dotnet_code_quality_unused_parameters = non_public:warning

# Prefer `a + (b * c)` over `a + b * c`
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
# Prefer `(a < b) == (c > d)` over `a < b == c > d`
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning
# Prefer `a || b && c` over `a || (b && c)`
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:warning
# Prefer `a.b.Length` over `(a.b).Length`
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning

# Use ternary operator instead of variable assignment + if/else statement
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning

# Prefer `M1() && M2()` over `M1() && M2() ? true : false`
dotnet_style_prefer_simplified_boolean_expressions = true:warning

# Use `x += 1` instead of `x = x + 1`
dotnet_style_prefer_compound_assignment = true:warning

# Use object initialization whenever possible
dotnet_style_collection_initializer = true:warning
dotnet_style_object_initializer = true:warning

## Tuple formatting
# Specify tuple names and use them: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0033 (see example)
dotnet_style_explicit_tuple_names = true:warning
# Prefer `var tuple = (age, name)` over `var tuple = (age: age, name: name)`
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning

## Space Formatting
# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = error
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = error
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.async_methods_should_be_async_suffix.severity = error
dotnet_naming_rule.async_methods_should_be_async_suffix.symbols = async_methods
dotnet_naming_rule.async_methods_should_be_async_suffix.style = async_suffix

dotnet_naming_rule.const_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.const_fields_should_be_pascal_case.symbols = const_fields
dotnet_naming_rule.const_fields_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private_or_internal_field_should_be_underscore_prefixed_camel_case.severity = warning
dotnet_naming_rule.private_or_internal_field_should_be_underscore_prefixed_camel_case.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_underscore_prefixed_camel_case.style = underscore_prefixed_camel_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = none

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_field.required_modifiers = none

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = none

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = none

dotnet_naming_symbols.async_methods.applicable_kinds = method
dotnet_naming_symbols.async_methods.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
dotnet_naming_symbols.async_methods.required_modifiers = async

dotnet_naming_symbols.const_fields.applicable_kinds = field, property
dotnet_naming_symbols.const_fields.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.const_fields.required_modifiers = const

# Naming styles

dotnet_naming_style.pascal_case.required_prefix = none
dotnet_naming_style.pascal_case.required_suffix = none
dotnet_naming_style.pascal_case.word_separator = none
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = none
dotnet_naming_style.begins_with_i.word_separator = none
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.underscore_prefixed_camel_case.required_prefix = _
dotnet_naming_style.underscore_prefixed_camel_case.required_suffix = none
dotnet_naming_style.underscore_prefixed_camel_case.word_separator = none
dotnet_naming_style.underscore_prefixed_camel_case.capitalization = camel_case

dotnet_naming_style.async_suffix.required_prefix = none
dotnet_naming_style.async_suffix.required_suffix = Async
dotnet_naming_style.async_suffix.word_separator = none
dotnet_naming_style.async_suffix.capitalization = pascal_case

dotnet_diagnostic.IDE0130.severity = none

### C# Files
[*.cs]

# Keep all import statements outside of namespaces
csharp_using_directive_placement = outside_namespace:warning

## Code Formatting
# Use var when possible
csharp_style_var_elsewhere = true:warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning

# Prefer new() instead of new object()
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning

# Try not to use braces when possible
csharp_prefer_braces = false:warning

# Prefer `o is string s` over `s = o as string; return s != null`
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning

csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning

# Use `(x is not y)` instead of `!(x is y)`
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = true:warning

# Assign unused values to discards
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:warning

# Use in-line using statements instead of using statements with braces
csharp_prefer_simple_using_statement = true:warning

# Prefer `func?.Invoke(args)` over `if (func != null) { func(args) }`
csharp_style_conditional_delegate_call = true:warning

# Prefer inlined out variables
csharp_style_inlined_variable_declaration = true:warning

# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0039
csharp_style_pattern_local_over_anonymous_function = true:warning

## Expression Formatting
# Prefer int a = default over int a = default(int)
csharp_prefer_simple_default_expression = true:warning

# Prefer inline switch expressions
csharp_style_prefer_switch_expression = true:warning

# Prefer lambdas when possible
csharp_style_expression_bodied_accessors = when_on_single_line:warning
csharp_style_expression_bodied_constructors = when_on_single_line:warning
csharp_style_expression_bodied_indexers = when_on_single_line:warning
csharp_style_expression_bodied_lambdas = when_on_single_line:warning
csharp_style_expression_bodied_local_functions = when_on_single_line:warning
csharp_style_expression_bodied_methods = when_on_single_line:warning
csharp_style_expression_bodied_operators = when_on_single_line:warning
csharp_style_expression_bodied_properties = when_on_single_line:warning

# Prefer constructed tuples instead of putting them into seperate variables
csharp_style_deconstructed_variable_declaration = true:warning

# Inline throw expressions, https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0016
csharp_style_throw_expression = true:warning

## Space formatting
# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true
