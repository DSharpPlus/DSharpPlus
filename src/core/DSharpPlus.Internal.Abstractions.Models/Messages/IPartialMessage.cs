// This Source Code form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

using System;
using System.Collections.Generic;

using DSharpPlus.Entities;

namespace DSharpPlus.Internal.Abstractions.Models;

/// <summary>
/// Represents a partially populated message object.
/// </summary>
public interface IPartialMessage
{
    /// <summary>
    /// The snowflake identifier of this message.
    /// </summary>
    public Snowflake Id { get; }

    /// <summary>
    /// The snowflake identifier of the channel this message was sent in.
    /// </summary>
    public Optional<Snowflake> ChannelId { get; }

    /// <summary>
    /// The author of this message. This is not guaranteed to be a valid user; if this message was sent
    /// by a webhook it will contain webhook metadata instead. Check <see cref="WebhookId"/> to see
    /// whether this message was generated by a webhook.
    /// </summary>
    public Optional<IUser> Author { get; }

    /// <summary>
    /// The text contents of this message. This will be empty if your application does not have the
    /// message content intent.
    /// </summary>
    public Optional<string> Content { get; }

    /// <summary>
    /// The timestamp at which this message was sent.
    /// </summary>
    public Optional<DateTimeOffset> Timestamp { get; }

    /// <summary>
    /// The timestamp at which this message was last edited.
    /// </summary>
    public Optional<DateTimeOffset?> EditedTimestamp { get; }

    /// <summary>
    /// Indicates whether this is a text-to-speech message.
    /// </summary>
    public Optional<bool> Tts { get; }

    /// <summary>
    /// Indicates whether this message mentions everyone.
    /// </summary>
    public Optional<bool> MentionEveryone { get; }

    /// <summary>
    /// The users specifically mentioned in this message.
    /// </summary>
    public Optional<IReadOnlyList<IUser>> Mentions { get; }

    /// <summary>
    /// The roles specifically mentioned in this message.
    /// </summary>
    public Optional<IReadOnlyList<Snowflake>> MentionRoles { get; }

    /// <summary>
    /// The channels specifically mentioned in this message.
    /// </summary>
    public Optional<IReadOnlyList<IChannelMention>> MentionChannels { get; }

    /// <summary>
    /// The files attached to this message.
    /// </summary>
    public Optional<IReadOnlyList<IAttachment>> Attachments { get; }

    /// <summary>
    /// The embeds added to this message.
    /// </summary>
    public Optional<IReadOnlyList<IEmbed>> Embeds { get; }

    /// <summary>
    /// The reactions added to this message.
    /// </summary>
    public Optional<IReadOnlyList<IReaction>> Reactions { get; }

    /// <summary>
    /// Used for validating whether a message was sent.
    /// </summary>
    public Optional<object> Nonce { get; }

    /// <summary>
    /// Indicates whether this message is pinned.
    /// </summary>
    public Optional<bool> Pinned { get; }

    /// <summary>
    /// The snowflake identifier of the webhook that generated this message.
    /// </summary>
    public Optional<Snowflake> WebhookId { get; }

    /// <summary>
    /// The type of this message.
    /// </summary>
    public Optional<DiscordMessageType> Type { get; }

    /// <summary>
    /// Sent with rich-presence related chat embeds, encodes an activity.
    /// </summary>
    public Optional<IMessageActivity> Activity { get; }

    /// <summary>
    /// Sent with rich-presence related chat embeds, encodes an associated application.
    /// </summary>
    public Optional<IPartialApplication> Application { get; }

    /// <summary>
    /// If this message is an interaction-owned or application-owned webhook, this is the snowflake
    /// identifier of its parent application.
    /// </summary>
    public Optional<Snowflake> ApplicationId { get; }

    /// <summary>
    /// Additional flags for this message.
    /// </summary>
    public Optional<DiscordMessageFlags> Flags { get; }

    /// <summary>
    /// A message reference showing the source of a crosspost, channel follow, pin, reply or thread
    /// creation/start message.
    /// </summary>
    public Optional<IMessageReference> MessageReference { get; }

    /// <summary>
    /// Contains message snapshot objects associated with the <see cref="MessageReference"/>.
    /// </summary>
    public Optional<IReadOnlyList<IMessageSnapshot>> MessageSnapshots { get; }

    /// <summary>
    /// The message associated with the <see cref="MessageReference"/>.
    /// </summary>
    public Optional<IPartialMessage?> ReferencedMessage { get; }

    /// <summary>
    /// Additional metadata if this message is the original response to an interaction.
    /// </summary>
    public Optional<IMessageInteractionMetadata> InteractionMetadata { get; }

    /// <summary>
    /// The thread that was started from this message.
    /// </summary>
    public Optional<IPartialChannel> Thread { get; }

    /// <summary>
    /// The components attached to this message.
    /// </summary>
    public Optional<IReadOnlyList<IActionRowComponent>> Components { get; }

    /// <summary>
    /// The stickers sent along with this message.
    /// </summary>
    public Optional<IStickerItem> StickerItems { get; }

    /// <summary>
    /// An approximate position of this message in a thread. This can be used to estimate the relative
    /// position of this message in its parent thread.
    /// </summary>
    public Optional<int> Position { get; }

    /// <summary>
    /// Metadata for the role subscription purchase or renewal that prompted this message.
    /// </summary>
    public Optional<IRoleSubscriptionData> RoleSubscriptionData { get; }

    /// <summary>
    /// Resolved data for users, members, channels and roles in this messages auto-populated select menus.
    /// </summary>
    public Optional<IResolvedData> Resolved { get; }

    /// <summary>
    /// A poll attached to this message.
    /// </summary>
    public Optional<IPoll> Poll { get; }

    /// <summary>
    /// A call associated with this message.
    /// </summary>
    public Optional<IMessageCall> Call { get; }
}
