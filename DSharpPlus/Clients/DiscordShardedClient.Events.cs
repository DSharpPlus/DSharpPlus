// This file is part of the DSharpPlus project.
//
// Copyright (c) 2015 Mike Santiago
// Copyright (c) 2016-2023 DSharpPlus Contributors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// This code was automatically generated by DSharpPlus.Tools.ShardedEventHandlingGen.
// Do not edit this manually.
// Created at Sun, 17 Sep 2023 02:47:27 GMT

using System;
using System.Threading.Tasks;
using DSharpPlus.AsyncEvents;
using DSharpPlus.EventArgs;
using Microsoft.Extensions.Logging;

namespace DSharpPlus;

public sealed partial class DiscordShardedClient
{
    /// <inheritdoc cref="DiscordClient.SocketErrored"/>
    public event AsyncEventHandler<DiscordClient, SocketErrorEventArgs> SocketErrored
    {
        add => this._socketErrored.Register(value);
        remove => this._socketErrored.Unregister(value);
    }
    private AsyncEvent<DiscordClient, SocketErrorEventArgs> _socketErrored;
    
    private Task Client_SocketErrored(DiscordClient client, SocketErrorEventArgs e)
        => this._socketErrored.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.SocketOpened"/>
    public event AsyncEventHandler<DiscordClient, SocketEventArgs> SocketOpened
    {
        add => this._socketOpened.Register(value);
        remove => this._socketOpened.Unregister(value);
    }
    private AsyncEvent<DiscordClient, SocketEventArgs> _socketOpened;
    
    private Task Client_SocketOpened(DiscordClient client, SocketEventArgs e)
        => this._socketOpened.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.SocketClosed"/>
    public event AsyncEventHandler<DiscordClient, SocketCloseEventArgs> SocketClosed
    {
        add => this._socketClosed.Register(value);
        remove => this._socketClosed.Unregister(value);
    }
    private AsyncEvent<DiscordClient, SocketCloseEventArgs> _socketClosed;
    
    private Task Client_SocketClosed(DiscordClient client, SocketCloseEventArgs e)
        => this._socketClosed.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.SessionCreated"/>
    public event AsyncEventHandler<DiscordClient, SessionReadyEventArgs> SessionCreated
    {
        add => this._sessionCreated.Register(value);
        remove => this._sessionCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, SessionReadyEventArgs> _sessionCreated;
    
    private Task Client_SessionCreated(DiscordClient client, SessionReadyEventArgs e)
        => this._sessionCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.SessionResumed"/>
    public event AsyncEventHandler<DiscordClient, SessionReadyEventArgs> SessionResumed
    {
        add => this._sessionResumed.Register(value);
        remove => this._sessionResumed.Unregister(value);
    }
    private AsyncEvent<DiscordClient, SessionReadyEventArgs> _sessionResumed;
    
    private Task Client_SessionResumed(DiscordClient client, SessionReadyEventArgs e)
        => this._sessionResumed.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.Heartbeated"/>
    public event AsyncEventHandler<DiscordClient, HeartbeatEventArgs> Heartbeated
    {
        add => this._heartbeated.Register(value);
        remove => this._heartbeated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, HeartbeatEventArgs> _heartbeated;
    
    private Task Client_Heartbeated(DiscordClient client, HeartbeatEventArgs e)
        => this._heartbeated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.Zombied"/>
    public event AsyncEventHandler<DiscordClient, ZombiedEventArgs> Zombied
    {
        add => this._zombied.Register(value);
        remove => this._zombied.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ZombiedEventArgs> _zombied;
    
    private Task Client_Zombied(DiscordClient client, ZombiedEventArgs e)
        => this._zombied.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ApplicationCommandPermissionsUpdated"/>
    public event AsyncEventHandler<DiscordClient, ApplicationCommandPermissionsUpdatedEventArgs> ApplicationCommandPermissionsUpdated
    {
        add => this._applicationCommandPermissionsUpdated.Register(value);
        remove => this._applicationCommandPermissionsUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ApplicationCommandPermissionsUpdatedEventArgs> _applicationCommandPermissionsUpdated;
    
    private Task Client_ApplicationCommandPermissionsUpdated(DiscordClient client, ApplicationCommandPermissionsUpdatedEventArgs e)
        => this._applicationCommandPermissionsUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ChannelCreated"/>
    public event AsyncEventHandler<DiscordClient, ChannelCreateEventArgs> ChannelCreated
    {
        add => this._channelCreated.Register(value);
        remove => this._channelCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ChannelCreateEventArgs> _channelCreated;
    
    private Task Client_ChannelCreated(DiscordClient client, ChannelCreateEventArgs e)
        => this._channelCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ChannelUpdated"/>
    public event AsyncEventHandler<DiscordClient, ChannelUpdateEventArgs> ChannelUpdated
    {
        add => this._channelUpdated.Register(value);
        remove => this._channelUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ChannelUpdateEventArgs> _channelUpdated;
    
    private Task Client_ChannelUpdated(DiscordClient client, ChannelUpdateEventArgs e)
        => this._channelUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ChannelDeleted"/>
    public event AsyncEventHandler<DiscordClient, ChannelDeleteEventArgs> ChannelDeleted
    {
        add => this._channelDeleted.Register(value);
        remove => this._channelDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ChannelDeleteEventArgs> _channelDeleted;
    
    private Task Client_ChannelDeleted(DiscordClient client, ChannelDeleteEventArgs e)
        => this._channelDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.DmChannelDeleted"/>
    public event AsyncEventHandler<DiscordClient, DmChannelDeleteEventArgs> DmChannelDeleted
    {
        add => this._dmChannelDeleted.Register(value);
        remove => this._dmChannelDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, DmChannelDeleteEventArgs> _dmChannelDeleted;
    
    private Task Client_DmChannelDeleted(DiscordClient client, DmChannelDeleteEventArgs e)
        => this._dmChannelDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ChannelPinsUpdated"/>
    public event AsyncEventHandler<DiscordClient, ChannelPinsUpdateEventArgs> ChannelPinsUpdated
    {
        add => this._channelPinsUpdated.Register(value);
        remove => this._channelPinsUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ChannelPinsUpdateEventArgs> _channelPinsUpdated;
    
    private Task Client_ChannelPinsUpdated(DiscordClient client, ChannelPinsUpdateEventArgs e)
        => this._channelPinsUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildCreated"/>
    public event AsyncEventHandler<DiscordClient, GuildCreateEventArgs> GuildCreated
    {
        add => this._guildCreated.Register(value);
        remove => this._guildCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildCreateEventArgs> _guildCreated;
    
    private Task Client_GuildCreated(DiscordClient client, GuildCreateEventArgs e)
        => this._guildCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildAvailable"/>
    public event AsyncEventHandler<DiscordClient, GuildCreateEventArgs> GuildAvailable
    {
        add => this._guildAvailable.Register(value);
        remove => this._guildAvailable.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildCreateEventArgs> _guildAvailable;
    
    private Task Client_GuildAvailable(DiscordClient client, GuildCreateEventArgs e)
        => this._guildAvailable.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildUpdated"/>
    public event AsyncEventHandler<DiscordClient, GuildUpdateEventArgs> GuildUpdated
    {
        add => this._guildUpdated.Register(value);
        remove => this._guildUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildUpdateEventArgs> _guildUpdated;
    
    private Task Client_GuildUpdated(DiscordClient client, GuildUpdateEventArgs e)
        => this._guildUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildDeleted"/>
    public event AsyncEventHandler<DiscordClient, GuildDeleteEventArgs> GuildDeleted
    {
        add => this._guildDeleted.Register(value);
        remove => this._guildDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildDeleteEventArgs> _guildDeleted;
    
    private Task Client_GuildDeleted(DiscordClient client, GuildDeleteEventArgs e)
        => this._guildDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildUnavailable"/>
    public event AsyncEventHandler<DiscordClient, GuildDeleteEventArgs> GuildUnavailable
    {
        add => this._guildUnavailable.Register(value);
        remove => this._guildUnavailable.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildDeleteEventArgs> _guildUnavailable;
    
    private Task Client_GuildUnavailable(DiscordClient client, GuildDeleteEventArgs e)
        => this._guildUnavailable.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildDownloadCompleted"/>
    public event AsyncEventHandler<DiscordClient, GuildDownloadCompletedEventArgs> GuildDownloadCompleted
    {
        add => this._guildDownloadCompleted.Register(value);
        remove => this._guildDownloadCompleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildDownloadCompletedEventArgs> _guildDownloadCompleted;
    
    private Task Client_GuildDownloadCompleted(DiscordClient client, GuildDownloadCompletedEventArgs e)
        => this._guildDownloadCompleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildEmojisUpdated"/>
    public event AsyncEventHandler<DiscordClient, GuildEmojisUpdateEventArgs> GuildEmojisUpdated
    {
        add => this._guildEmojisUpdated.Register(value);
        remove => this._guildEmojisUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildEmojisUpdateEventArgs> _guildEmojisUpdated;
    
    private Task Client_GuildEmojisUpdated(DiscordClient client, GuildEmojisUpdateEventArgs e)
        => this._guildEmojisUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildStickersUpdated"/>
    public event AsyncEventHandler<DiscordClient, GuildStickersUpdateEventArgs> GuildStickersUpdated
    {
        add => this._guildStickersUpdated.Register(value);
        remove => this._guildStickersUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildStickersUpdateEventArgs> _guildStickersUpdated;
    
    private Task Client_GuildStickersUpdated(DiscordClient client, GuildStickersUpdateEventArgs e)
        => this._guildStickersUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildIntegrationsUpdated"/>
    public event AsyncEventHandler<DiscordClient, GuildIntegrationsUpdateEventArgs> GuildIntegrationsUpdated
    {
        add => this._guildIntegrationsUpdated.Register(value);
        remove => this._guildIntegrationsUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildIntegrationsUpdateEventArgs> _guildIntegrationsUpdated;
    
    private Task Client_GuildIntegrationsUpdated(DiscordClient client, GuildIntegrationsUpdateEventArgs e)
        => this._guildIntegrationsUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildAuditLogCreated"/>
    public event AsyncEventHandler<DiscordClient, GuildAuditLogCreatedEventArgs> GuildAuditLogCreated
    {
        add => this._guildAuditLogCreated.Register(value);
        remove => this._guildAuditLogCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildAuditLogCreatedEventArgs> _guildAuditLogCreated;
    
    private Task Client_GuildAuditLogCreated(DiscordClient client, GuildAuditLogCreatedEventArgs e)
        => this._guildAuditLogCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ScheduledGuildEventCreated"/>
    public event AsyncEventHandler<DiscordClient, ScheduledGuildEventCreateEventArgs> ScheduledGuildEventCreated
    {
        add => this._scheduledGuildEventCreated.Register(value);
        remove => this._scheduledGuildEventCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ScheduledGuildEventCreateEventArgs> _scheduledGuildEventCreated;
    
    private Task Client_ScheduledGuildEventCreated(DiscordClient client, ScheduledGuildEventCreateEventArgs e)
        => this._scheduledGuildEventCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ScheduledGuildEventUpdated"/>
    public event AsyncEventHandler<DiscordClient, ScheduledGuildEventUpdateEventArgs> ScheduledGuildEventUpdated
    {
        add => this._scheduledGuildEventUpdated.Register(value);
        remove => this._scheduledGuildEventUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ScheduledGuildEventUpdateEventArgs> _scheduledGuildEventUpdated;
    
    private Task Client_ScheduledGuildEventUpdated(DiscordClient client, ScheduledGuildEventUpdateEventArgs e)
        => this._scheduledGuildEventUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ScheduledGuildEventDeleted"/>
    public event AsyncEventHandler<DiscordClient, ScheduledGuildEventDeleteEventArgs> ScheduledGuildEventDeleted
    {
        add => this._scheduledGuildEventDeleted.Register(value);
        remove => this._scheduledGuildEventDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ScheduledGuildEventDeleteEventArgs> _scheduledGuildEventDeleted;
    
    private Task Client_ScheduledGuildEventDeleted(DiscordClient client, ScheduledGuildEventDeleteEventArgs e)
        => this._scheduledGuildEventDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ScheduledGuildEventCompleted"/>
    public event AsyncEventHandler<DiscordClient, ScheduledGuildEventCompletedEventArgs> ScheduledGuildEventCompleted
    {
        add => this._scheduledGuildEventCompleted.Register(value);
        remove => this._scheduledGuildEventCompleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ScheduledGuildEventCompletedEventArgs> _scheduledGuildEventCompleted;
    
    private Task Client_ScheduledGuildEventCompleted(DiscordClient client, ScheduledGuildEventCompletedEventArgs e)
        => this._scheduledGuildEventCompleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ScheduledGuildEventUserAdded"/>
    public event AsyncEventHandler<DiscordClient, ScheduledGuildEventUserAddEventArgs> ScheduledGuildEventUserAdded
    {
        add => this._scheduledGuildEventUserAdded.Register(value);
        remove => this._scheduledGuildEventUserAdded.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ScheduledGuildEventUserAddEventArgs> _scheduledGuildEventUserAdded;
    
    private Task Client_ScheduledGuildEventUserAdded(DiscordClient client, ScheduledGuildEventUserAddEventArgs e)
        => this._scheduledGuildEventUserAdded.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ScheduledGuildEventUserRemoved"/>
    public event AsyncEventHandler<DiscordClient, ScheduledGuildEventUserRemoveEventArgs> ScheduledGuildEventUserRemoved
    {
        add => this._scheduledGuildEventUserRemoved.Register(value);
        remove => this._scheduledGuildEventUserRemoved.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ScheduledGuildEventUserRemoveEventArgs> _scheduledGuildEventUserRemoved;
    
    private Task Client_ScheduledGuildEventUserRemoved(DiscordClient client, ScheduledGuildEventUserRemoveEventArgs e)
        => this._scheduledGuildEventUserRemoved.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildBanAdded"/>
    public event AsyncEventHandler<DiscordClient, GuildBanAddEventArgs> GuildBanAdded
    {
        add => this._guildBanAdded.Register(value);
        remove => this._guildBanAdded.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildBanAddEventArgs> _guildBanAdded;
    
    private Task Client_GuildBanAdded(DiscordClient client, GuildBanAddEventArgs e)
        => this._guildBanAdded.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildBanRemoved"/>
    public event AsyncEventHandler<DiscordClient, GuildBanRemoveEventArgs> GuildBanRemoved
    {
        add => this._guildBanRemoved.Register(value);
        remove => this._guildBanRemoved.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildBanRemoveEventArgs> _guildBanRemoved;
    
    private Task Client_GuildBanRemoved(DiscordClient client, GuildBanRemoveEventArgs e)
        => this._guildBanRemoved.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildMemberAdded"/>
    public event AsyncEventHandler<DiscordClient, GuildMemberAddEventArgs> GuildMemberAdded
    {
        add => this._guildMemberAdded.Register(value);
        remove => this._guildMemberAdded.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildMemberAddEventArgs> _guildMemberAdded;
    
    private Task Client_GuildMemberAdded(DiscordClient client, GuildMemberAddEventArgs e)
        => this._guildMemberAdded.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildMemberRemoved"/>
    public event AsyncEventHandler<DiscordClient, GuildMemberRemoveEventArgs> GuildMemberRemoved
    {
        add => this._guildMemberRemoved.Register(value);
        remove => this._guildMemberRemoved.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildMemberRemoveEventArgs> _guildMemberRemoved;
    
    private Task Client_GuildMemberRemoved(DiscordClient client, GuildMemberRemoveEventArgs e)
        => this._guildMemberRemoved.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildMemberUpdated"/>
    public event AsyncEventHandler<DiscordClient, GuildMemberUpdateEventArgs> GuildMemberUpdated
    {
        add => this._guildMemberUpdated.Register(value);
        remove => this._guildMemberUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildMemberUpdateEventArgs> _guildMemberUpdated;
    
    private Task Client_GuildMemberUpdated(DiscordClient client, GuildMemberUpdateEventArgs e)
        => this._guildMemberUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildMembersChunked"/>
    public event AsyncEventHandler<DiscordClient, GuildMembersChunkEventArgs> GuildMembersChunked
    {
        add => this._guildMembersChunked.Register(value);
        remove => this._guildMembersChunked.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildMembersChunkEventArgs> _guildMembersChunked;
    
    private Task Client_GuildMembersChunked(DiscordClient client, GuildMembersChunkEventArgs e)
        => this._guildMembersChunked.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildRoleCreated"/>
    public event AsyncEventHandler<DiscordClient, GuildRoleCreateEventArgs> GuildRoleCreated
    {
        add => this._guildRoleCreated.Register(value);
        remove => this._guildRoleCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildRoleCreateEventArgs> _guildRoleCreated;
    
    private Task Client_GuildRoleCreated(DiscordClient client, GuildRoleCreateEventArgs e)
        => this._guildRoleCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildRoleUpdated"/>
    public event AsyncEventHandler<DiscordClient, GuildRoleUpdateEventArgs> GuildRoleUpdated
    {
        add => this._guildRoleUpdated.Register(value);
        remove => this._guildRoleUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildRoleUpdateEventArgs> _guildRoleUpdated;
    
    private Task Client_GuildRoleUpdated(DiscordClient client, GuildRoleUpdateEventArgs e)
        => this._guildRoleUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.GuildRoleDeleted"/>
    public event AsyncEventHandler<DiscordClient, GuildRoleDeleteEventArgs> GuildRoleDeleted
    {
        add => this._guildRoleDeleted.Register(value);
        remove => this._guildRoleDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, GuildRoleDeleteEventArgs> _guildRoleDeleted;
    
    private Task Client_GuildRoleDeleted(DiscordClient client, GuildRoleDeleteEventArgs e)
        => this._guildRoleDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.InviteCreated"/>
    public event AsyncEventHandler<DiscordClient, InviteCreateEventArgs> InviteCreated
    {
        add => this._inviteCreated.Register(value);
        remove => this._inviteCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, InviteCreateEventArgs> _inviteCreated;
    
    private Task Client_InviteCreated(DiscordClient client, InviteCreateEventArgs e)
        => this._inviteCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.InviteDeleted"/>
    public event AsyncEventHandler<DiscordClient, InviteDeleteEventArgs> InviteDeleted
    {
        add => this._inviteDeleted.Register(value);
        remove => this._inviteDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, InviteDeleteEventArgs> _inviteDeleted;
    
    private Task Client_InviteDeleted(DiscordClient client, InviteDeleteEventArgs e)
        => this._inviteDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageCreated"/>
    public event AsyncEventHandler<DiscordClient, MessageCreateEventArgs> MessageCreated
    {
        add => this._messageCreated.Register(value);
        remove => this._messageCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageCreateEventArgs> _messageCreated;
    
    private Task Client_MessageCreated(DiscordClient client, MessageCreateEventArgs e)
        => this._messageCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageAcknowledged"/>
    public event AsyncEventHandler<DiscordClient, MessageAcknowledgeEventArgs> MessageAcknowledged
    {
        add => this._messageAcknowledged.Register(value);
        remove => this._messageAcknowledged.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageAcknowledgeEventArgs> _messageAcknowledged;
    
    private Task Client_MessageAcknowledged(DiscordClient client, MessageAcknowledgeEventArgs e)
        => this._messageAcknowledged.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageUpdated"/>
    public event AsyncEventHandler<DiscordClient, MessageUpdateEventArgs> MessageUpdated
    {
        add => this._messageUpdated.Register(value);
        remove => this._messageUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageUpdateEventArgs> _messageUpdated;
    
    private Task Client_MessageUpdated(DiscordClient client, MessageUpdateEventArgs e)
        => this._messageUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageDeleted"/>
    public event AsyncEventHandler<DiscordClient, MessageDeleteEventArgs> MessageDeleted
    {
        add => this._messageDeleted.Register(value);
        remove => this._messageDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageDeleteEventArgs> _messageDeleted;
    
    private Task Client_MessageDeleted(DiscordClient client, MessageDeleteEventArgs e)
        => this._messageDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessagesBulkDeleted"/>
    public event AsyncEventHandler<DiscordClient, MessageBulkDeleteEventArgs> MessagesBulkDeleted
    {
        add => this._messagesBulkDeleted.Register(value);
        remove => this._messagesBulkDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageBulkDeleteEventArgs> _messagesBulkDeleted;
    
    private Task Client_MessagesBulkDeleted(DiscordClient client, MessageBulkDeleteEventArgs e)
        => this._messagesBulkDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageReactionAdded"/>
    public event AsyncEventHandler<DiscordClient, MessageReactionAddEventArgs> MessageReactionAdded
    {
        add => this._messageReactionAdded.Register(value);
        remove => this._messageReactionAdded.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageReactionAddEventArgs> _messageReactionAdded;
    
    private Task Client_MessageReactionAdded(DiscordClient client, MessageReactionAddEventArgs e)
        => this._messageReactionAdded.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageReactionRemoved"/>
    public event AsyncEventHandler<DiscordClient, MessageReactionRemoveEventArgs> MessageReactionRemoved
    {
        add => this._messageReactionRemoved.Register(value);
        remove => this._messageReactionRemoved.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageReactionRemoveEventArgs> _messageReactionRemoved;
    
    private Task Client_MessageReactionRemoved(DiscordClient client, MessageReactionRemoveEventArgs e)
        => this._messageReactionRemoved.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageReactionsCleared"/>
    public event AsyncEventHandler<DiscordClient, MessageReactionsClearEventArgs> MessageReactionsCleared
    {
        add => this._messageReactionsCleared.Register(value);
        remove => this._messageReactionsCleared.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageReactionsClearEventArgs> _messageReactionsCleared;
    
    private Task Client_MessageReactionsCleared(DiscordClient client, MessageReactionsClearEventArgs e)
        => this._messageReactionsCleared.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.MessageReactionRemovedEmoji"/>
    public event AsyncEventHandler<DiscordClient, MessageReactionRemoveEmojiEventArgs> MessageReactionRemovedEmoji
    {
        add => this._messageReactionRemovedEmoji.Register(value);
        remove => this._messageReactionRemovedEmoji.Unregister(value);
    }
    private AsyncEvent<DiscordClient, MessageReactionRemoveEmojiEventArgs> _messageReactionRemovedEmoji;
    
    private Task Client_MessageReactionRemovedEmoji(DiscordClient client, MessageReactionRemoveEmojiEventArgs e)
        => this._messageReactionRemovedEmoji.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.PresenceUpdated"/>
    public event AsyncEventHandler<DiscordClient, PresenceUpdateEventArgs> PresenceUpdated
    {
        add => this._presenceUpdated.Register(value);
        remove => this._presenceUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, PresenceUpdateEventArgs> _presenceUpdated;
    
    private Task Client_PresenceUpdated(DiscordClient client, PresenceUpdateEventArgs e)
        => this._presenceUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.UserSettingsUpdated"/>
    public event AsyncEventHandler<DiscordClient, UserSettingsUpdateEventArgs> UserSettingsUpdated
    {
        add => this._userSettingsUpdated.Register(value);
        remove => this._userSettingsUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, UserSettingsUpdateEventArgs> _userSettingsUpdated;
    
    private Task Client_UserSettingsUpdated(DiscordClient client, UserSettingsUpdateEventArgs e)
        => this._userSettingsUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.UserUpdated"/>
    public event AsyncEventHandler<DiscordClient, UserUpdateEventArgs> UserUpdated
    {
        add => this._userUpdated.Register(value);
        remove => this._userUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, UserUpdateEventArgs> _userUpdated;
    
    private Task Client_UserUpdated(DiscordClient client, UserUpdateEventArgs e)
        => this._userUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.VoiceStateUpdated"/>
    public event AsyncEventHandler<DiscordClient, VoiceStateUpdateEventArgs> VoiceStateUpdated
    {
        add => this._voiceStateUpdated.Register(value);
        remove => this._voiceStateUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, VoiceStateUpdateEventArgs> _voiceStateUpdated;
    
    private Task Client_VoiceStateUpdated(DiscordClient client, VoiceStateUpdateEventArgs e)
        => this._voiceStateUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.VoiceServerUpdated"/>
    public event AsyncEventHandler<DiscordClient, VoiceServerUpdateEventArgs> VoiceServerUpdated
    {
        add => this._voiceServerUpdated.Register(value);
        remove => this._voiceServerUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, VoiceServerUpdateEventArgs> _voiceServerUpdated;
    
    private Task Client_VoiceServerUpdated(DiscordClient client, VoiceServerUpdateEventArgs e)
        => this._voiceServerUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ThreadCreated"/>
    public event AsyncEventHandler<DiscordClient, ThreadCreateEventArgs> ThreadCreated
    {
        add => this._threadCreated.Register(value);
        remove => this._threadCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ThreadCreateEventArgs> _threadCreated;
    
    private Task Client_ThreadCreated(DiscordClient client, ThreadCreateEventArgs e)
        => this._threadCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ThreadUpdated"/>
    public event AsyncEventHandler<DiscordClient, ThreadUpdateEventArgs> ThreadUpdated
    {
        add => this._threadUpdated.Register(value);
        remove => this._threadUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ThreadUpdateEventArgs> _threadUpdated;
    
    private Task Client_ThreadUpdated(DiscordClient client, ThreadUpdateEventArgs e)
        => this._threadUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ThreadDeleted"/>
    public event AsyncEventHandler<DiscordClient, ThreadDeleteEventArgs> ThreadDeleted
    {
        add => this._threadDeleted.Register(value);
        remove => this._threadDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ThreadDeleteEventArgs> _threadDeleted;
    
    private Task Client_ThreadDeleted(DiscordClient client, ThreadDeleteEventArgs e)
        => this._threadDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ThreadListSynced"/>
    public event AsyncEventHandler<DiscordClient, ThreadListSyncEventArgs> ThreadListSynced
    {
        add => this._threadListSynced.Register(value);
        remove => this._threadListSynced.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ThreadListSyncEventArgs> _threadListSynced;
    
    private Task Client_ThreadListSynced(DiscordClient client, ThreadListSyncEventArgs e)
        => this._threadListSynced.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ThreadMemberUpdated"/>
    public event AsyncEventHandler<DiscordClient, ThreadMemberUpdateEventArgs> ThreadMemberUpdated
    {
        add => this._threadMemberUpdated.Register(value);
        remove => this._threadMemberUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ThreadMemberUpdateEventArgs> _threadMemberUpdated;
    
    private Task Client_ThreadMemberUpdated(DiscordClient client, ThreadMemberUpdateEventArgs e)
        => this._threadMemberUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ThreadMembersUpdated"/>
    public event AsyncEventHandler<DiscordClient, ThreadMembersUpdateEventArgs> ThreadMembersUpdated
    {
        add => this._threadMembersUpdated.Register(value);
        remove => this._threadMembersUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ThreadMembersUpdateEventArgs> _threadMembersUpdated;
    
    private Task Client_ThreadMembersUpdated(DiscordClient client, ThreadMembersUpdateEventArgs e)
        => this._threadMembersUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.IntegrationCreated"/>
    public event AsyncEventHandler<DiscordClient, IntegrationCreateEventArgs> IntegrationCreated
    {
        add => this._integrationCreated.Register(value);
        remove => this._integrationCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, IntegrationCreateEventArgs> _integrationCreated;
    
    private Task Client_IntegrationCreated(DiscordClient client, IntegrationCreateEventArgs e)
        => this._integrationCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.IntegrationUpdated"/>
    public event AsyncEventHandler<DiscordClient, IntegrationUpdateEventArgs> IntegrationUpdated
    {
        add => this._integrationUpdated.Register(value);
        remove => this._integrationUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, IntegrationUpdateEventArgs> _integrationUpdated;
    
    private Task Client_IntegrationUpdated(DiscordClient client, IntegrationUpdateEventArgs e)
        => this._integrationUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.IntegrationDeleted"/>
    public event AsyncEventHandler<DiscordClient, IntegrationDeleteEventArgs> IntegrationDeleted
    {
        add => this._integrationDeleted.Register(value);
        remove => this._integrationDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, IntegrationDeleteEventArgs> _integrationDeleted;
    
    private Task Client_IntegrationDeleted(DiscordClient client, IntegrationDeleteEventArgs e)
        => this._integrationDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.StageInstanceCreated"/>
    public event AsyncEventHandler<DiscordClient, StageInstanceCreateEventArgs> StageInstanceCreated
    {
        add => this._stageInstanceCreated.Register(value);
        remove => this._stageInstanceCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, StageInstanceCreateEventArgs> _stageInstanceCreated;
    
    private Task Client_StageInstanceCreated(DiscordClient client, StageInstanceCreateEventArgs e)
        => this._stageInstanceCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.StageInstanceUpdated"/>
    public event AsyncEventHandler<DiscordClient, StageInstanceUpdateEventArgs> StageInstanceUpdated
    {
        add => this._stageInstanceUpdated.Register(value);
        remove => this._stageInstanceUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, StageInstanceUpdateEventArgs> _stageInstanceUpdated;
    
    private Task Client_StageInstanceUpdated(DiscordClient client, StageInstanceUpdateEventArgs e)
        => this._stageInstanceUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.StageInstanceDeleted"/>
    public event AsyncEventHandler<DiscordClient, StageInstanceDeleteEventArgs> StageInstanceDeleted
    {
        add => this._stageInstanceDeleted.Register(value);
        remove => this._stageInstanceDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, StageInstanceDeleteEventArgs> _stageInstanceDeleted;
    
    private Task Client_StageInstanceDeleted(DiscordClient client, StageInstanceDeleteEventArgs e)
        => this._stageInstanceDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.InteractionCreated"/>
    public event AsyncEventHandler<DiscordClient, InteractionCreateEventArgs> InteractionCreated
    {
        add => this._interactionCreated.Register(value);
        remove => this._interactionCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, InteractionCreateEventArgs> _interactionCreated;
    
    private Task Client_InteractionCreated(DiscordClient client, InteractionCreateEventArgs e)
        => this._interactionCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ComponentInteractionCreated"/>
    public event AsyncEventHandler<DiscordClient, ComponentInteractionCreateEventArgs> ComponentInteractionCreated
    {
        add => this._componentInteractionCreated.Register(value);
        remove => this._componentInteractionCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ComponentInteractionCreateEventArgs> _componentInteractionCreated;
    
    private Task Client_ComponentInteractionCreated(DiscordClient client, ComponentInteractionCreateEventArgs e)
        => this._componentInteractionCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ModalSubmitted"/>
    public event AsyncEventHandler<DiscordClient, ModalSubmitEventArgs> ModalSubmitted
    {
        add => this._modalSubmitted.Register(value);
        remove => this._modalSubmitted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ModalSubmitEventArgs> _modalSubmitted;
    
    private Task Client_ModalSubmitted(DiscordClient client, ModalSubmitEventArgs e)
        => this._modalSubmitted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ContextMenuInteractionCreated"/>
    public event AsyncEventHandler<DiscordClient, ContextMenuInteractionCreateEventArgs> ContextMenuInteractionCreated
    {
        add => this._contextMenuInteractionCreated.Register(value);
        remove => this._contextMenuInteractionCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ContextMenuInteractionCreateEventArgs> _contextMenuInteractionCreated;
    
    private Task Client_ContextMenuInteractionCreated(DiscordClient client, ContextMenuInteractionCreateEventArgs e)
        => this._contextMenuInteractionCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.TypingStarted"/>
    public event AsyncEventHandler<DiscordClient, TypingStartEventArgs> TypingStarted
    {
        add => this._typingStarted.Register(value);
        remove => this._typingStarted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, TypingStartEventArgs> _typingStarted;
    
    private Task Client_TypingStarted(DiscordClient client, TypingStartEventArgs e)
        => this._typingStarted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.UnknownEvent"/>
    public event AsyncEventHandler<DiscordClient, UnknownEventArgs> UnknownEvent
    {
        add => this._unknownEvent.Register(value);
        remove => this._unknownEvent.Unregister(value);
    }
    private AsyncEvent<DiscordClient, UnknownEventArgs> _unknownEvent;
    
    private Task Client_UnknownEvent(DiscordClient client, UnknownEventArgs e)
        => this._unknownEvent.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.WebhooksUpdated"/>
    public event AsyncEventHandler<DiscordClient, WebhooksUpdateEventArgs> WebhooksUpdated
    {
        add => this._webhooksUpdated.Register(value);
        remove => this._webhooksUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, WebhooksUpdateEventArgs> _webhooksUpdated;
    
    private Task Client_WebhooksUpdated(DiscordClient client, WebhooksUpdateEventArgs e)
        => this._webhooksUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.ClientErrored"/>
    public event AsyncEventHandler<DiscordClient, ClientErrorEventArgs> ClientErrored
    {
        add => this._clientErrored.Register(value);
        remove => this._clientErrored.Unregister(value);
    }
    private AsyncEvent<DiscordClient, ClientErrorEventArgs> _clientErrored;
    
    private Task Client_ClientErrored(DiscordClient client, ClientErrorEventArgs e)
        => this._clientErrored.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.AutoModerationRuleCreated"/>
    public event AsyncEventHandler<DiscordClient, AutoModerationRuleCreateEventArgs> AutoModerationRuleCreated
    {
        add => this._autoModerationRuleCreated.Register(value);
        remove => this._autoModerationRuleCreated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, AutoModerationRuleCreateEventArgs> _autoModerationRuleCreated;
    
    private Task Client_AutoModerationRuleCreated(DiscordClient client, AutoModerationRuleCreateEventArgs e)
        => this._autoModerationRuleCreated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.AutoModerationRuleUpdated"/>
    public event AsyncEventHandler<DiscordClient, AutoModerationRuleUpdateEventArgs> AutoModerationRuleUpdated
    {
        add => this._autoModerationRuleUpdated.Register(value);
        remove => this._autoModerationRuleUpdated.Unregister(value);
    }
    private AsyncEvent<DiscordClient, AutoModerationRuleUpdateEventArgs> _autoModerationRuleUpdated;
    
    private Task Client_AutoModerationRuleUpdated(DiscordClient client, AutoModerationRuleUpdateEventArgs e)
        => this._autoModerationRuleUpdated.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.AutoModerationRuleDeleted"/>
    public event AsyncEventHandler<DiscordClient, AutoModerationRuleDeleteEventArgs> AutoModerationRuleDeleted
    {
        add => this._autoModerationRuleDeleted.Register(value);
        remove => this._autoModerationRuleDeleted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, AutoModerationRuleDeleteEventArgs> _autoModerationRuleDeleted;
    
    private Task Client_AutoModerationRuleDeleted(DiscordClient client, AutoModerationRuleDeleteEventArgs e)
        => this._autoModerationRuleDeleted.InvokeAsync(client, e);
    
    /// <inheritdoc cref="DiscordClient.AutoModerationRuleExecuted"/>
    public event AsyncEventHandler<DiscordClient, AutoModerationRuleExecuteEventArgs> AutoModerationRuleExecuted
    {
        add => this._autoModerationRuleExecuted.Register(value);
        remove => this._autoModerationRuleExecuted.Unregister(value);
    }
    private AsyncEvent<DiscordClient, AutoModerationRuleExecuteEventArgs> _autoModerationRuleExecuted;
    
    private Task Client_AutoModerationRuleExecuted(DiscordClient client, AutoModerationRuleExecuteEventArgs e)
        => this._autoModerationRuleExecuted.InvokeAsync(client, e);
    
    private void HookEventHandlers(DiscordClient client)
    {
        client.SocketErrored += this.Client_SocketErrored;
        client.SocketOpened += this.Client_SocketOpened;
        client.SocketClosed += this.Client_SocketClosed;
        client.SessionCreated += this.Client_SessionCreated;
        client.SessionResumed += this.Client_SessionResumed;
        client.Heartbeated += this.Client_Heartbeated;
        client.Zombied += this.Client_Zombied;
        client.ApplicationCommandPermissionsUpdated += this.Client_ApplicationCommandPermissionsUpdated;
        client.ChannelCreated += this.Client_ChannelCreated;
        client.ChannelUpdated += this.Client_ChannelUpdated;
        client.ChannelDeleted += this.Client_ChannelDeleted;
        client.DmChannelDeleted += this.Client_DmChannelDeleted;
        client.ChannelPinsUpdated += this.Client_ChannelPinsUpdated;
        client.GuildCreated += this.Client_GuildCreated;
        client.GuildAvailable += this.Client_GuildAvailable;
        client.GuildUpdated += this.Client_GuildUpdated;
        client.GuildDeleted += this.Client_GuildDeleted;
        client.GuildUnavailable += this.Client_GuildUnavailable;
        client.GuildDownloadCompleted += this.Client_GuildDownloadCompleted;
        client.GuildEmojisUpdated += this.Client_GuildEmojisUpdated;
        client.GuildStickersUpdated += this.Client_GuildStickersUpdated;
        client.GuildIntegrationsUpdated += this.Client_GuildIntegrationsUpdated;
        client.GuildAuditLogCreated += this.Client_GuildAuditLogCreated;
        client.ScheduledGuildEventCreated += this.Client_ScheduledGuildEventCreated;
        client.ScheduledGuildEventUpdated += this.Client_ScheduledGuildEventUpdated;
        client.ScheduledGuildEventDeleted += this.Client_ScheduledGuildEventDeleted;
        client.ScheduledGuildEventCompleted += this.Client_ScheduledGuildEventCompleted;
        client.ScheduledGuildEventUserAdded += this.Client_ScheduledGuildEventUserAdded;
        client.ScheduledGuildEventUserRemoved += this.Client_ScheduledGuildEventUserRemoved;
        client.GuildBanAdded += this.Client_GuildBanAdded;
        client.GuildBanRemoved += this.Client_GuildBanRemoved;
        client.GuildMemberAdded += this.Client_GuildMemberAdded;
        client.GuildMemberRemoved += this.Client_GuildMemberRemoved;
        client.GuildMemberUpdated += this.Client_GuildMemberUpdated;
        client.GuildMembersChunked += this.Client_GuildMembersChunked;
        client.GuildRoleCreated += this.Client_GuildRoleCreated;
        client.GuildRoleUpdated += this.Client_GuildRoleUpdated;
        client.GuildRoleDeleted += this.Client_GuildRoleDeleted;
        client.InviteCreated += this.Client_InviteCreated;
        client.InviteDeleted += this.Client_InviteDeleted;
        client.MessageCreated += this.Client_MessageCreated;
        client.MessageAcknowledged += this.Client_MessageAcknowledged;
        client.MessageUpdated += this.Client_MessageUpdated;
        client.MessageDeleted += this.Client_MessageDeleted;
        client.MessagesBulkDeleted += this.Client_MessagesBulkDeleted;
        client.MessageReactionAdded += this.Client_MessageReactionAdded;
        client.MessageReactionRemoved += this.Client_MessageReactionRemoved;
        client.MessageReactionsCleared += this.Client_MessageReactionsCleared;
        client.MessageReactionRemovedEmoji += this.Client_MessageReactionRemovedEmoji;
        client.PresenceUpdated += this.Client_PresenceUpdated;
        client.UserSettingsUpdated += this.Client_UserSettingsUpdated;
        client.UserUpdated += this.Client_UserUpdated;
        client.VoiceStateUpdated += this.Client_VoiceStateUpdated;
        client.VoiceServerUpdated += this.Client_VoiceServerUpdated;
        client.ThreadCreated += this.Client_ThreadCreated;
        client.ThreadUpdated += this.Client_ThreadUpdated;
        client.ThreadDeleted += this.Client_ThreadDeleted;
        client.ThreadListSynced += this.Client_ThreadListSynced;
        client.ThreadMemberUpdated += this.Client_ThreadMemberUpdated;
        client.ThreadMembersUpdated += this.Client_ThreadMembersUpdated;
        client.IntegrationCreated += this.Client_IntegrationCreated;
        client.IntegrationUpdated += this.Client_IntegrationUpdated;
        client.IntegrationDeleted += this.Client_IntegrationDeleted;
        client.StageInstanceCreated += this.Client_StageInstanceCreated;
        client.StageInstanceUpdated += this.Client_StageInstanceUpdated;
        client.StageInstanceDeleted += this.Client_StageInstanceDeleted;
        client.InteractionCreated += this.Client_InteractionCreated;
        client.ComponentInteractionCreated += this.Client_ComponentInteractionCreated;
        client.ModalSubmitted += this.Client_ModalSubmitted;
        client.ContextMenuInteractionCreated += this.Client_ContextMenuInteractionCreated;
        client.TypingStarted += this.Client_TypingStarted;
        client.UnknownEvent += this.Client_UnknownEvent;
        client.WebhooksUpdated += this.Client_WebhooksUpdated;
        client.ClientErrored += this.Client_ClientErrored;
        client.AutoModerationRuleCreated += this.Client_AutoModerationRuleCreated;
        client.AutoModerationRuleUpdated += this.Client_AutoModerationRuleUpdated;
        client.AutoModerationRuleDeleted += this.Client_AutoModerationRuleDeleted;
        client.AutoModerationRuleExecuted += this.Client_AutoModerationRuleExecuted;
    }
    
    private void UnhookEventHandlers(DiscordClient client)
    {
        client.SocketErrored -= this.Client_SocketErrored;
        client.SocketOpened -= this.Client_SocketOpened;
        client.SocketClosed -= this.Client_SocketClosed;
        client.SessionCreated -= this.Client_SessionCreated;
        client.SessionResumed -= this.Client_SessionResumed;
        client.Heartbeated -= this.Client_Heartbeated;
        client.Zombied -= this.Client_Zombied;
        client.ApplicationCommandPermissionsUpdated -= this.Client_ApplicationCommandPermissionsUpdated;
        client.ChannelCreated -= this.Client_ChannelCreated;
        client.ChannelUpdated -= this.Client_ChannelUpdated;
        client.ChannelDeleted -= this.Client_ChannelDeleted;
        client.DmChannelDeleted -= this.Client_DmChannelDeleted;
        client.ChannelPinsUpdated -= this.Client_ChannelPinsUpdated;
        client.GuildCreated -= this.Client_GuildCreated;
        client.GuildAvailable -= this.Client_GuildAvailable;
        client.GuildUpdated -= this.Client_GuildUpdated;
        client.GuildDeleted -= this.Client_GuildDeleted;
        client.GuildUnavailable -= this.Client_GuildUnavailable;
        client.GuildDownloadCompleted -= this.Client_GuildDownloadCompleted;
        client.GuildEmojisUpdated -= this.Client_GuildEmojisUpdated;
        client.GuildStickersUpdated -= this.Client_GuildStickersUpdated;
        client.GuildIntegrationsUpdated -= this.Client_GuildIntegrationsUpdated;
        client.GuildAuditLogCreated -= this.Client_GuildAuditLogCreated;
        client.ScheduledGuildEventCreated -= this.Client_ScheduledGuildEventCreated;
        client.ScheduledGuildEventUpdated -= this.Client_ScheduledGuildEventUpdated;
        client.ScheduledGuildEventDeleted -= this.Client_ScheduledGuildEventDeleted;
        client.ScheduledGuildEventCompleted -= this.Client_ScheduledGuildEventCompleted;
        client.ScheduledGuildEventUserAdded -= this.Client_ScheduledGuildEventUserAdded;
        client.ScheduledGuildEventUserRemoved -= this.Client_ScheduledGuildEventUserRemoved;
        client.GuildBanAdded -= this.Client_GuildBanAdded;
        client.GuildBanRemoved -= this.Client_GuildBanRemoved;
        client.GuildMemberAdded -= this.Client_GuildMemberAdded;
        client.GuildMemberRemoved -= this.Client_GuildMemberRemoved;
        client.GuildMemberUpdated -= this.Client_GuildMemberUpdated;
        client.GuildMembersChunked -= this.Client_GuildMembersChunked;
        client.GuildRoleCreated -= this.Client_GuildRoleCreated;
        client.GuildRoleUpdated -= this.Client_GuildRoleUpdated;
        client.GuildRoleDeleted -= this.Client_GuildRoleDeleted;
        client.InviteCreated -= this.Client_InviteCreated;
        client.InviteDeleted -= this.Client_InviteDeleted;
        client.MessageCreated -= this.Client_MessageCreated;
        client.MessageAcknowledged -= this.Client_MessageAcknowledged;
        client.MessageUpdated -= this.Client_MessageUpdated;
        client.MessageDeleted -= this.Client_MessageDeleted;
        client.MessagesBulkDeleted -= this.Client_MessagesBulkDeleted;
        client.MessageReactionAdded -= this.Client_MessageReactionAdded;
        client.MessageReactionRemoved -= this.Client_MessageReactionRemoved;
        client.MessageReactionsCleared -= this.Client_MessageReactionsCleared;
        client.MessageReactionRemovedEmoji -= this.Client_MessageReactionRemovedEmoji;
        client.PresenceUpdated -= this.Client_PresenceUpdated;
        client.UserSettingsUpdated -= this.Client_UserSettingsUpdated;
        client.UserUpdated -= this.Client_UserUpdated;
        client.VoiceStateUpdated -= this.Client_VoiceStateUpdated;
        client.VoiceServerUpdated -= this.Client_VoiceServerUpdated;
        client.ThreadCreated -= this.Client_ThreadCreated;
        client.ThreadUpdated -= this.Client_ThreadUpdated;
        client.ThreadDeleted -= this.Client_ThreadDeleted;
        client.ThreadListSynced -= this.Client_ThreadListSynced;
        client.ThreadMemberUpdated -= this.Client_ThreadMemberUpdated;
        client.ThreadMembersUpdated -= this.Client_ThreadMembersUpdated;
        client.IntegrationCreated -= this.Client_IntegrationCreated;
        client.IntegrationUpdated -= this.Client_IntegrationUpdated;
        client.IntegrationDeleted -= this.Client_IntegrationDeleted;
        client.StageInstanceCreated -= this.Client_StageInstanceCreated;
        client.StageInstanceUpdated -= this.Client_StageInstanceUpdated;
        client.StageInstanceDeleted -= this.Client_StageInstanceDeleted;
        client.InteractionCreated -= this.Client_InteractionCreated;
        client.ComponentInteractionCreated -= this.Client_ComponentInteractionCreated;
        client.ModalSubmitted -= this.Client_ModalSubmitted;
        client.ContextMenuInteractionCreated -= this.Client_ContextMenuInteractionCreated;
        client.TypingStarted -= this.Client_TypingStarted;
        client.UnknownEvent -= this.Client_UnknownEvent;
        client.WebhooksUpdated -= this.Client_WebhooksUpdated;
        client.ClientErrored -= this.Client_ClientErrored;
        client.AutoModerationRuleCreated -= this.Client_AutoModerationRuleCreated;
        client.AutoModerationRuleUpdated -= this.Client_AutoModerationRuleUpdated;
        client.AutoModerationRuleDeleted -= this.Client_AutoModerationRuleDeleted;
        client.AutoModerationRuleExecuted -= this.Client_AutoModerationRuleExecuted;
    }
    
    private void InternalSetup()
    {
        this._clientErrored = new AsyncEvent<DiscordClient, ClientErrorEventArgs>("CLIENT_ERRORED", this.Goof);
        this._socketErrored = new("SocketErrored", this.EventErrorHandler);
        this._socketOpened = new("SocketOpened", this.EventErrorHandler);
        this._socketClosed = new("SocketClosed", this.EventErrorHandler);
        this._sessionCreated = new("SessionCreated", this.EventErrorHandler);
        this._sessionResumed = new("SessionResumed", this.EventErrorHandler);
        this._heartbeated = new("Heartbeated", this.EventErrorHandler);
        this._zombied = new("Zombied", this.EventErrorHandler);
        this._applicationCommandPermissionsUpdated = new("ApplicationCommandPermissionsUpdated", this.EventErrorHandler);
        this._channelCreated = new("ChannelCreated", this.EventErrorHandler);
        this._channelUpdated = new("ChannelUpdated", this.EventErrorHandler);
        this._channelDeleted = new("ChannelDeleted", this.EventErrorHandler);
        this._dmChannelDeleted = new("DmChannelDeleted", this.EventErrorHandler);
        this._channelPinsUpdated = new("ChannelPinsUpdated", this.EventErrorHandler);
        this._guildCreated = new("GuildCreated", this.EventErrorHandler);
        this._guildAvailable = new("GuildAvailable", this.EventErrorHandler);
        this._guildUpdated = new("GuildUpdated", this.EventErrorHandler);
        this._guildDeleted = new("GuildDeleted", this.EventErrorHandler);
        this._guildUnavailable = new("GuildUnavailable", this.EventErrorHandler);
        this._guildDownloadCompleted = new("GuildDownloadCompleted", this.EventErrorHandler);
        this._guildEmojisUpdated = new("GuildEmojisUpdated", this.EventErrorHandler);
        this._guildStickersUpdated = new("GuildStickersUpdated", this.EventErrorHandler);
        this._guildIntegrationsUpdated = new("GuildIntegrationsUpdated", this.EventErrorHandler);
        this._guildAuditLogCreated = new("GuildAuditLogCreated", this.EventErrorHandler);
        this._scheduledGuildEventCreated = new("ScheduledGuildEventCreated", this.EventErrorHandler);
        this._scheduledGuildEventUpdated = new("ScheduledGuildEventUpdated", this.EventErrorHandler);
        this._scheduledGuildEventDeleted = new("ScheduledGuildEventDeleted", this.EventErrorHandler);
        this._scheduledGuildEventCompleted = new("ScheduledGuildEventCompleted", this.EventErrorHandler);
        this._scheduledGuildEventUserAdded = new("ScheduledGuildEventUserAdded", this.EventErrorHandler);
        this._scheduledGuildEventUserRemoved = new("ScheduledGuildEventUserRemoved", this.EventErrorHandler);
        this._guildBanAdded = new("GuildBanAdded", this.EventErrorHandler);
        this._guildBanRemoved = new("GuildBanRemoved", this.EventErrorHandler);
        this._guildMemberAdded = new("GuildMemberAdded", this.EventErrorHandler);
        this._guildMemberRemoved = new("GuildMemberRemoved", this.EventErrorHandler);
        this._guildMemberUpdated = new("GuildMemberUpdated", this.EventErrorHandler);
        this._guildMembersChunked = new("GuildMembersChunked", this.EventErrorHandler);
        this._guildRoleCreated = new("GuildRoleCreated", this.EventErrorHandler);
        this._guildRoleUpdated = new("GuildRoleUpdated", this.EventErrorHandler);
        this._guildRoleDeleted = new("GuildRoleDeleted", this.EventErrorHandler);
        this._inviteCreated = new("InviteCreated", this.EventErrorHandler);
        this._inviteDeleted = new("InviteDeleted", this.EventErrorHandler);
        this._messageCreated = new("MessageCreated", this.EventErrorHandler);
        this._messageAcknowledged = new("MessageAcknowledged", this.EventErrorHandler);
        this._messageUpdated = new("MessageUpdated", this.EventErrorHandler);
        this._messageDeleted = new("MessageDeleted", this.EventErrorHandler);
        this._messagesBulkDeleted = new("MessagesBulkDeleted", this.EventErrorHandler);
        this._messageReactionAdded = new("MessageReactionAdded", this.EventErrorHandler);
        this._messageReactionRemoved = new("MessageReactionRemoved", this.EventErrorHandler);
        this._messageReactionsCleared = new("MessageReactionsCleared", this.EventErrorHandler);
        this._messageReactionRemovedEmoji = new("MessageReactionRemovedEmoji", this.EventErrorHandler);
        this._presenceUpdated = new("PresenceUpdated", this.EventErrorHandler);
        this._userSettingsUpdated = new("UserSettingsUpdated", this.EventErrorHandler);
        this._userUpdated = new("UserUpdated", this.EventErrorHandler);
        this._voiceStateUpdated = new("VoiceStateUpdated", this.EventErrorHandler);
        this._voiceServerUpdated = new("VoiceServerUpdated", this.EventErrorHandler);
        this._threadCreated = new("ThreadCreated", this.EventErrorHandler);
        this._threadUpdated = new("ThreadUpdated", this.EventErrorHandler);
        this._threadDeleted = new("ThreadDeleted", this.EventErrorHandler);
        this._threadListSynced = new("ThreadListSynced", this.EventErrorHandler);
        this._threadMemberUpdated = new("ThreadMemberUpdated", this.EventErrorHandler);
        this._threadMembersUpdated = new("ThreadMembersUpdated", this.EventErrorHandler);
        this._integrationCreated = new("IntegrationCreated", this.EventErrorHandler);
        this._integrationUpdated = new("IntegrationUpdated", this.EventErrorHandler);
        this._integrationDeleted = new("IntegrationDeleted", this.EventErrorHandler);
        this._stageInstanceCreated = new("StageInstanceCreated", this.EventErrorHandler);
        this._stageInstanceUpdated = new("StageInstanceUpdated", this.EventErrorHandler);
        this._stageInstanceDeleted = new("StageInstanceDeleted", this.EventErrorHandler);
        this._interactionCreated = new("InteractionCreated", this.EventErrorHandler);
        this._componentInteractionCreated = new("ComponentInteractionCreated", this.EventErrorHandler);
        this._modalSubmitted = new("ModalSubmitted", this.EventErrorHandler);
        this._contextMenuInteractionCreated = new("ContextMenuInteractionCreated", this.EventErrorHandler);
        this._typingStarted = new("TypingStarted", this.EventErrorHandler);
        this._unknownEvent = new("UnknownEvent", this.EventErrorHandler);
        this._webhooksUpdated = new("WebhooksUpdated", this.EventErrorHandler);
        this._autoModerationRuleCreated = new("AutoModerationRuleCreated", this.EventErrorHandler);
        this._autoModerationRuleUpdated = new("AutoModerationRuleUpdated", this.EventErrorHandler);
        this._autoModerationRuleDeleted = new("AutoModerationRuleDeleted", this.EventErrorHandler);
        this._autoModerationRuleExecuted = new("AutoModerationRuleExecuted", this.EventErrorHandler);
    }
    
}
